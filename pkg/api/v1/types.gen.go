// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIds IDs of the members to add to the group
	MemberIds []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Ok true if the members were added successfully
	Ok bool `json:"ok"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID gidx.PrefixedID   `json:"group_id"`
	Members []gidx.PrefixedID `json:"members"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bOJ37sw+fKTxBjX1tJxbjRZwdnBrKWtOHM2XvuW3R/W0WFtPO3TuqbLzuwW9A+acqNTX1N2nGKur7Rp/",
	"vTCulYUZTb1llZTd+jaqsNVYpYcqgPmwr2oQX8mwnUvYOuS18N995GzN+185bD5H7VVRUmrer/OBABlW",
	"92LG3fFSbpPtaH23eM/Ki859JI8nGWC0FzkTNzY8iqs5pJTho7sAXYSNK16DQwS9ttXTPhVjXl1q3jOI",
	"/RfmPEhzUk9HDOL2gLkFeG8q4y/n7GWJxnjHzVyqkbHJSYZ+v7br37RYN9YxfCqOMsHvqNRNmd6ktXPO",
	"4te6KP9iobEPzCvHx2fPmgbsYrPBUs+v67vi3j5ON2WIJIm7fm2MjwxaXdXC/UCu372W31bGOnw2bt4q",
	"rbqezfjapn6+3WCkgvxFXe2tDUZqRWzSoPX8qXF73JsntcHYO0SNe90/hKP0ruD75otW6IHE2KrqnZf4",
	"zP0pRT0v81pkPq0qIPZD5LFmsf02SvxG9tqwxDfFa/io/3EnIUMFqC6EN+m16xNujwXYfd5Ij23v9u90",
	"3K9JNnViuyV7eu2e9WrHUhEScYbqwNY6tpcmBo192P6PFtXnrWJmHY2ytysvTclNNq5KluZ/9JK4uCr+",
	"HwAA//+Uzk9GJDwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
