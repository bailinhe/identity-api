// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
