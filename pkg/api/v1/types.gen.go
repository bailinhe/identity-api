// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cvjdjvfcoiluiv8HAAD//x/+kjHKMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
