// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIds IDs of the members to add to the group
	MemberIDs []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Ok true if the members were added successfully
	Ok bool `json:"ok"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// SubjectID defines model for subjectID.
type SubjectID = gidx.PrefixedID

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID gidx.PrefixedID   `json:"group_id"`
	Members []gidx.PrefixedID `json:"members"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListUserGroupsParams defines parameters for ListUserGroups.
type ListUserGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// ReplaceGroupMembersJSONRequestBody defines body for ReplaceGroupMembers for application/json ContentType.
type ReplaceGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"alT/0lZ4+U3+3wAAAP//CyiSho5CAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
