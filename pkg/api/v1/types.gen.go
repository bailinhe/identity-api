// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
