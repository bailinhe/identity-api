// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
