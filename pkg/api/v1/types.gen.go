// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lqOmEK5aMfeWuy6ui/8HAAD//0wK3HVGNwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
