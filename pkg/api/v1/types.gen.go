// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIds IDs of the members to add to the group
	MemberIDs []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Ok true if the members were added successfully
	Ok bool `json:"ok"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// SubjectID defines model for subjectID.
type SubjectID = gidx.PrefixedID

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID gidx.PrefixedID   `json:"group_id"`
	Members []gidx.PrefixedID `json:"members"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// ReplaceGroupMembersJSONRequestBody defines body for ReplaceGroupMembers for application/json ContentType.
type ReplaceGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
