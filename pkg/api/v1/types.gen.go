// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Nz0xAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
