// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIds IDs of the members to add to the group
	MemberIDs []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Ok true if the members were added successfully
	Ok bool `json:"ok"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// SubjectID defines model for subjectID.
type SubjectID = gidx.PrefixedID

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupIDCollection defines model for GroupIDCollection.
type GroupIDCollection struct {
	GroupIDs []gidx.PrefixedID `json:"group_ids"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID   gidx.PrefixedID   `json:"group_id"`
	MemberIDs []gidx.PrefixedID `json:"member_ids"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListUserGroupsParams defines parameters for ListUserGroups.
type ListUserGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// ReplaceGroupMembersJSONRequestBody defines body for ReplaceGroupMembers for application/json ContentType.
type ReplaceGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
