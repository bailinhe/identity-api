// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zL3lrovr4v8BAAD//x9fdVItNwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
