// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIds IDs of the members to add to the group
	MemberIds []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Ok true if the members were added successfully
	Ok bool `json:"ok"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerId ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// SubjectID defines model for subjectID.
type SubjectID = gidx.PrefixedID

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID gidx.PrefixedID   `json:"group_id"`
	Members []gidx.PrefixedID `json:"members"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EhfXxf8DAAD//1t0f8zcPgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
