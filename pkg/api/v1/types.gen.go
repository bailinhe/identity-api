// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// CreatedAt time the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy ID of the user who created the group
	CreatedBy *gidx.PrefixedID `json:"created_by,omitempty"`

	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Id ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Members IDs of the members of the group
	Members []gidx.PrefixedID `json:"members"`

	// Name a name for the group
	Name string `json:"name"`

	// Owner ID of the owner of the group
	Owner gidx.PrefixedID `json:"owner"`

	// UpdatedAt time the group was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy ID of the user who last updated the group
	UpdatedBy *gidx.PrefixedID `json:"updated_by,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tvh/AAAA//+bRnMDmy8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
